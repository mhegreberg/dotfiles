#!/usr/bin/env sh
# script to start a batch of ssh sessions. requires jq
# reads a json file from $HOME/.config/multi-ssh/clusters.json for data

## pre-flight checks
if ! command -v jq &> /dev/null
then 
	echo "multi-ssh requires jq. please install jq"
	exit 1
fi 

if [ -f $HOME/.config/multi-ssh/clusters.json ]
then
	config="cat $HOME/.config/multi-ssh/clusters.json"
else
	echo "no config found. create file at $HOME/.config/multi-ssh/clusters.json"
	echo "json file should have the following structure:"
	sample=" {\"clusters\":[
	{ \"name\":\"clusterName\", \"nodes\":[\"node1\",\"node2\",\"node3\"]},
	{ \"name\":\"otherCluster\", \"nodes\":[\"singleNode\"]} ]}"
	echo $sample | jq -r
	exit 1
fi

## functions
clusterValidityCheck()
{
	clusterExists=$($config | jq -r ".clusters | any(.name==\"$1\")")
	if [ $clusterExists = 'false' ]
	then
		echo "invalid cluster"
		exit 1
	fi
}
getNodes()
{
	nodes=$($config | jq -r ".clusters[] | select(.name==\"$1\") | .nodes[]")
	echo $nodes
}

## command mode
#runs command on all nodes
if [ $# -gt 1 ]
then
	echo "command mode"
	clusterSelected=$1
	clusterValidityCheck $clusterSelected
	command="${*:2}"
	nodes="$(getNodes $clusterSelected |sed -e "s/ /,/g" )"
	parallel --tag --nonall --keep-order -S $nodes $command
	exit 0 
fi

## tmux mode
#enters tmux session with all nodes
if [ -z $1 ]
then
	clusterSelected=$($config | jq -r ".clusters[] | .name" | \
		fzf --header 'Select cluster for multi-ssh' \
		--tac --height=~100% )
else
	clusterSelected=$1
fi

clusterValidityCheck $clusterSelected

tmux new-session -d -s $clusterSelected -n 'local'

nodes="$(getNodes $clusterSelected)"
for node in $nodes
do
	tmux new-window -a -n "$node" -t $clusterSelected ssh $node
	#tmux send-keys -t $clusterSelected:"$node" "ssh $node" Enter
done

if [ -z $TMUX ]
then
		tmux attach-session -t $clusterSelected
else
		tmux switch-client -t $clusterSelected
fi

exit 0
